{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>trials-agent is a backend service providing a streaming chatbot API with conversation management, file handling, and tool execution capabilities with the aim to research clinical trials public registers and aid this with web browsing agent to synthesize conclusions for user, create charts and documents. </p> <p>This documentation explains how to integrate with the API endpoints and utilize the system's features.</p>"},{"location":"agent/","title":"Trials Agent Module","text":"<p>The agentic architecture enables long-running tasks performing research for user.</p>"},{"location":"agent/#streaming","title":"Streaming","text":"<p>The agent processes queries and streams responses in three types of chunks:</p> <ul> <li>Text chunks: Regular conversational text</li> <li>Tool calls: Notifications when the agent needs to use a tool</li> <li>Tool results: Data returned from tool execution</li> </ul> <p>This allows for real-time visibility into the agent's reasoning process.</p>"},{"location":"agent/#multi-agent-capabilities","title":"Multi-Agent Capabilities","text":"<p>The system can dynamically invoke specialized agents for different tasks:</p> <ul> <li>Research Agent: Searches for information using search tools</li> <li>Data Analysis Agent: Processes structured data from files</li> <li>Code Execution Agent: Runs and tests code snippets</li> </ul>"},{"location":"agent/#tool-integration","title":"Tool Integration","text":"<p>The agent can use various tools:</p> <ul> <li>Search: Web search capabilities</li> <li>Calculator: Mathematical operations</li> <li>File Analysis: Extracts information from user files</li> <li>Code Execution: Runs Python code in a sandboxed environment</li> <li>Image Analysis: Processes and extracts information from images</li> </ul>"},{"location":"agent/#example-tool-call-flow","title":"Example Tool Call Flow","text":"<p>User asks: \"What's in this image and how does it relate to the stock market data from my CSV?\"</p> <ul> <li>Agent streams: (text) \"I'll analyze your image and CSV file...\"</li> <li>Agent streams: (tool_call) <code>{\"tool_name\": \"image_analyzer\", \"args\": {\"image_path\": \"user_image.jpg\"}}</code></li> <li>Agent streams: (tool_result) <code>{\"description\": \"Graph showing stock price trends\"}</code></li> <li>Agent streams: (tool_call) <code>{\"tool_name\": \"csv_analyzer\", \"args\": {\"file_path\": \"stocks.csv\"}}</code></li> <li>Agent streams: (tool_result) <code>{\"data\": {\"trends\": [...], \"summary\": \"...\"}}</code></li> <li>Agent streams: (text) \"The image shows... which correlates with your data...\"</li> </ul>"},{"location":"agent/#advanced-visualization-tools","title":"Advanced Visualization Tools","text":"<p>Document Generator The agent can create beautifully formatted academic documents with rich formatting:</p> <p>Purpose: Creates publication-ready documents with Markdown formatting, LaTeX math expressions, and embedded figures Content Support: Headers, emphasis, code blocks, math expressions, tables, task lists Figure Integration: Can embed images from the workspace with captions When Used: For comprehensive reports, analysis summaries, or research papers</p> <pre><code>{\n  \"text\": \"# Analysis Report\\n\\nThe data shows a **significant correlation** between variables.\\n\\n## Mathematical Model\\n\\n$$y = mx + b$$\\n\\nWhere $m=2.3$ and $b=0.7$\",\n  \"figures\": [\n    {\n      \"path\": \"correlation_graph.png\",\n      \"caption\": \"Figure 1: Correlation between variables X and Y\"\n    }\n  ]\n}\n</code></pre>"},{"location":"agent/#live-chart","title":"Live Chart","text":"<p>The agent can generate interactive charts for data visualization:</p> <p>Chart Types: Line, bar, and radar charts Customization: Titles, labels, colors, and dataset configuration Real-time Rendering: Charts appear directly in the conversation When Used: For data analysis, trend visualization, or comparative studies</p> <pre><code>{\n  \"type\": \"bar\",\n  \"title\": \"Monthly Revenue Growth\",\n  \"data\": {\n    \"labels\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\"],\n    \"datasets\": [\n      {\n        \"label\": \"2024\",\n        \"data\": [65, 59, 80, 81],\n        \"backgroundColor\": \"rgba(75, 192, 192, 0.2)\"\n      },\n      {\n        \"label\": \"2023\",\n        \"data\": [45, 55, 65, 70],\n        \"backgroundColor\": \"rgba(153, 102, 255, 0.2)\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"authentication/","title":"Bearer Token Authentication","text":"<p>The trials-agent API supports authentication via Azure Active Directory OAuth 2.0 flow, providing secure access using bearer tokens.</p>"},{"location":"authentication/#authentication-flow","title":"Authentication Flow","text":"<ol> <li>Initiate Login: Direct users to the Azure login endpoint to begin authentication</li> </ol> <p>GET /azure-login</p> <p>{   \"login_url\": \"https://login.microsoftonline.com/...\" }</p> <ol> <li>Complete Authentication: After successful Azure authentication, the user is redirected to the callback URL</li> </ol> <p>GET /azure-callback</p> <ol> <li>Upon successful authentication, the endpoint returns:</li> </ol> <p>{   \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",   \"token_type\": \"bearer\",   \"email\": \"user@example.com\" }</p> <ol> <li>Using token: Using the Token: Include the token in subsequent API requests using the Authorization header</li> </ol> <p>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</p> <p>Example API Request with Bearer Token</p> <p>import requests</p>"},{"location":"authentication/#store-the-token-received-from-azure-callback","title":"Store the token received from /azure-callback","text":"<p>token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"</p>"},{"location":"authentication/#use-the-token-in-subsequent-api-calls","title":"Use the token in subsequent API calls","text":"<p>headers = {     \"Authorization\": f\"Bearer {token}\",     \"Content-Type\": \"application/json\" }</p> <p>response = requests.get(     \"https://api.trials-agent.example.com/conversations\",     headers=headers )</p> <p>data = response.json()</p>"},{"location":"chat/","title":"Chat","text":""},{"location":"chat/#chat-functionality","title":"Chat Functionality","text":""},{"location":"chat/#send-message-and-stream-response","title":"Send Message and Stream Response","text":"<p>GET <code>/api/chat/{conversation_id}</code></p> <p>Query Parameters: - message: User's input message - images: JSON array of image filenames to include (optional)</p> <p>Response: Server-sent events stream with the following event types:</p> <ul> <li>Text Chunks: <code>data: {\"type\": \"text\", \"content\": \"Partial response...\"}</code></li> <li>Tool Calls: <code>data: {\"type\": \"tool_call\", \"tool_name\": \"search\", \"args\": {\"query\": \"example\"}}</code></li> <li>Tool Results: <code>data: {\"type\": \"tool_result\", \"tool_name\": \"search\", \"result\": {\"data\": \"search results\"}}</code></li> <li>End of Stream: <code>data: [DONE]</code></li> </ul>"},{"location":"chat/#stop-stream","title":"Stop Stream","text":"<p>POST <code>/api/stop/{conversation_id}/{stream_id}</code></p> <p>Stops an active streaming response.</p> <p>Response: <pre><code>{\n  \"status\": \"stopping\"\n}\n</code></pre></p>"},{"location":"conversations/","title":"Conversations","text":""},{"location":"conversations/#conversation-management","title":"Conversation Management","text":""},{"location":"conversations/#list-conversations","title":"List Conversations","text":"<p>GET <code>/api/conversations/list</code></p> <p>Returns all conversations for a user.</p> <p>Response: <pre><code>[\n  {\n    \"id\": 1,\n    \"name\": \"Conversation Name\",\n    \"created_at\": \"2025-03-26T12:00:00\"\n  }\n]\n</code></pre></p>"},{"location":"conversations/#get-conversation-messages","title":"Get Conversation Messages","text":"<p>GET <code>/api/conversations/{conversation_id}</code></p> <p>Query Parameters: - page: Page number (default: 1) - pageSize: Messages per page (default: 20)</p> <p>Response: <pre><code>{\n  \"messages\": [\n    {\n      \"id\": 1,\n      \"role\": \"user\",\n      \"content\": \"Hello\",\n      \"created_at\": \"2025-03-26T12:00:00\"\n    },\n    {\n      \"id\": 2,\n      \"role\": \"assistant\",\n      \"content\": \"Hi there!\",\n      \"created_at\": \"2025-03-26T12:00:01\"\n    }\n  ],\n  \"totalPages\": 1\n}\n</code></pre></p>"},{"location":"conversations/#create-conversation","title":"Create Conversation","text":"<p>POST <code>/api/conversations/</code></p> <p>Request Body: <pre><code>{\n  \"name\": \"New Conversation\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": 3,\n  \"name\": \"New Conversation\",\n  \"created_at\": \"2025-03-26T12:30:00\"\n}\n</code></pre></p>"},{"location":"conversations/#rename-conversation","title":"Rename Conversation","text":"<p>PUT <code>/api/conversations/{conversation_id}</code></p> <p>Request Body: <pre><code>{\n  \"name\": \"Updated Name\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true\n}\n</code></pre></p>"},{"location":"conversations/#delete-conversation","title":"Delete Conversation","text":"<p>DELETE <code>/api/conversations/{conversation_id}</code></p> <p>Response: <pre><code>{\n  \"success\": true\n}\n</code></pre></p>"},{"location":"files/","title":"Files","text":""},{"location":"files/#file-management","title":"File Management","text":"<p>Files are stored in user-specific directories and can be referenced in chat messages for analysis by the agent system.</p>"},{"location":"files/#file-usage-by-agent","title":"File Usage by Agent","text":"<p>Files uploaded through the API are used in multiple ways:</p> <ul> <li>Image Analysis: Images are base64 encoded and sent to the agent for visual processing</li> <li>Document Processing: The agent can access and analyze uploaded documents</li> <li>File Reference: Users can reference files in messages (e.g., \"Please analyze data.csv\")</li> </ul>"},{"location":"files/#file-lifecycle","title":"File Lifecycle","text":"<ul> <li>Upload via <code>/upload/{user_id}</code></li> <li>Reference in chat via the <code>images</code> parameter or message text</li> <li>Agent processes file content using appropriate tools</li> <li>File remains available for future conversations until deleted</li> </ul>"},{"location":"files/#upload-file","title":"Upload File","text":"<p>POST <code>/api/files</code></p> <p>Form Data: - file: File to upload (multipart/form-data)</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"fileName\": \"example.txt\"\n}\n</code></pre></p> <p>Error Response (if file size limit exceeded): <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"file size exceeded\"\n}\n</code></pre></p>"},{"location":"files/#list-files","title":"List Files","text":"<p>GET <code>/api/files</code></p> <p>Response: <pre><code>[\n  \"file1.txt\",\n  \"image.jpg\"\n]\n</code></pre></p>"},{"location":"files/#download-file","title":"Download File","text":"<p>GET <code>/api/files/{file_name}</code></p> <p>Returns the a pre-signed link as a file download.</p>"},{"location":"files/#delete-file","title":"Delete File","text":"<p>DELETE <code>/api/files/{file_name}</code></p> <p>Response: <pre><code>{\n  \"success\": true\n}\n</code></pre></p>"},{"location":"integration/","title":"Integration","text":""},{"location":"integration/#client-integration","title":"Client Integration","text":""},{"location":"integration/#example-processing-streamed-responses","title":"Example: Processing Streamed Responses","text":"<pre><code>const eventSource = new EventSource(`/api/chat/${conversationId}?message=${message}`);\n\neventSource.onmessage = (event) =&gt; {\n  if (event.data === \"[DONE]\") {\n    eventSource.close();\n    return;\n  }\n\n  const data = JSON.parse(event.data);\n\n  switch (data.type) {\n    case \"text\":\n      // Append text to UI\n      break;\n    case \"tool_call\":\n      // Display tool being called\n      break;\n    case \"tool_progress\":\n      // Display tool percentage progress for long-running tasks\n      break;\n    case \"tool_result\":\n      // Display tool results, possibly with visualization\n      break;\n  }\n};\n\n// To stop the stream\nconst stopStream = () =&gt; {\n  fetch(`/api/stop/${conversationId}/${streamId}`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  eventSource.close();\n};\n</code></pre>"},{"location":"integration/#handling-rich-visualization-outputs","title":"Handling Rich Visualization Outputs","text":"<p>When processing streamed responses, special handling is required for document_generator and live_chart tool results:</p>"},{"location":"integration/#document-generator","title":"Document Generator","text":"<pre><code>case \"tool_result\":\n  if (data.toolName === \"document_generator\") {\n    const docData = data.result;\n\n    // Create container for the document\n    const docContainer = document.createElement('div');\n    docContainer.className = 'formatted-document';\n\n    // Render the markdown content\n    const textContent = document.createElement('div');\n    textContent.innerHTML = markdownToHtml(docData.text); // Use your preferred markdown renderer\n    docContainer.appendChild(textContent);\n\n    // Render figures if present\n    if (docData.figures &amp;&amp; docData.figures.length &gt; 0) {\n      const figuresContainer = document.createElement('div');\n      figuresContainer.className = 'document-figures';\n\n      docData.figures.forEach(figure =&gt; {\n        const figureDiv = document.createElement('figure');\n\n        // Create image element\n        const img = document.createElement('img');\n        img.src = figure.url || `/download/${userId}?file=${figure.path}`;\n        img.alt = figure.caption;\n        figureDiv.appendChild(img);\n\n        // Create caption\n        const caption = document.createElement('figcaption');\n        caption.textContent = figure.caption;\n        figureDiv.appendChild(caption);\n\n        figuresContainer.appendChild(figureDiv);\n      });\n\n      docContainer.appendChild(figuresContainer);\n    }\n\n    messageContainer.appendChild(docContainer);\n  }\n  break;\n</code></pre>"},{"location":"integration/#live-chart","title":"Live Chart","text":"<p>Agent can visualize analyzed data streaming a live chart:</p> <pre><code>case \"tool_result\":\n  if (data.toolName === \"live_chart\") {\n    const chartData = data.result;\n\n    // Create canvas for chart\n    const chartContainer = document.createElement('div');\n    chartContainer.className = 'chart-container';\n\n    const canvas = document.createElement('canvas');\n    const chartId = `chart-${Date.now()}`;\n    canvas.id = chartId;\n    chartContainer.appendChild(canvas);\n\n    messageContainer.appendChild(chartContainer);\n\n    // Render chart using Chart.js or similar library\n    const ctx = document.getElementById(chartId).getContext('2d');\n    new Chart(ctx, {\n      type: chartData.type,\n      data: chartData.data,\n      options: {\n        responsive: true,\n        plugins: {\n          title: {\n            display: true,\n            text: chartData.title\n          }\n        }\n      }\n    });\n  }\n  break;\n</code></pre>"}]}